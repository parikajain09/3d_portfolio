/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: nimzu (https://sketchfab.com/nimzuk)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/foxs-islands-163b68e09fcc47618450150be7785907
Title: Fox's islands
*/

import { useRef, useEffect } from 'react';
import { useGLTF } from '@react-three/drei';
import { useFrame, useThree } from '@react-three/fiber';
import { a } from '@react-spring/three';

import islandScene from '../assets/3d/island.glb';

const Island = ({ isRotating, setIsRotating, setCurrentStage, ...props}) => {
    const islandRef = useRef();

    const { gl, viewport } = useThree();
    const { nodes, materials } = useGLTF(islandScene);

    const lastX = useRef(0);
    const rotationSpeed = useRef(0);
    const dampingFactor = 0.95; // Damping factor for smooth stopping

    const handlePointerDown = (e) => {
      e.stopPropagation();
      e.preventDefault();
      setIsRotating(true);

      const clientX = e.touches 
      ? e.touches[0].clientX
      : e.clientX;

      lastX.current = clientX;
    }

    const handlePointerUp = (e) => {
      e.stopPropagation();
      e.preventDefault();
      setIsRotating(false);

      
    }

    const handlePointerMove = (e) => {
      e.stopPropagation();
      e.preventDefault();

      if(isRotating) {
      const clientX = e.touches 
      ? e.touches[0].clientX
      : e.clientX;

      const delta = (clientX - lastX.current) / viewport.width;

      islandRef.current.rotation.y += delta * 0.01 * Math.PI;

      lastX.current = clientX;
      rotationSpeed.current = delta * 0.01 * Math.PI; // Approximate speed based on last movement
      } 
    }

    const handleKeyDown = (e) => {
      if (e.key === 'ArrowLeft') {
        if(!isRotating) setIsRotating(true);

        islandRef.current.rotation.y += 0.005 * Math.PI;
        //rotationSpeed.current = 0.007;

      } else if (e.key === 'ArrowRight') {
        if(!isRotating) setIsRotating(true);

        islandRef.current.rotation.y -= 0.005 * Math.PI;
         //rotationSpeed.current = -0.007;
      }
    }

    const handleKeyUp = (e) => {
      if (e.key === 'ArrowLeft' || e.key === 'ArrowRight') {
        setIsRotating(false);
      }
    }
    

    useFrame(() => {
      if(!isRotating) {
        rotationSpeed.current *= dampingFactor; // Apply damping

        if(Math.abs(rotationSpeed.current) < 0.001) {
          rotationSpeed.current = 0; // Stop completely if speed is very low
        }
        islandRef.current.rotation.y += rotationSpeed.current;
      }
         let angle = islandRef.current.rotation.y % (2 * Math.PI);
         if (angle < 0) angle += 2 * Math.PI;

  // Divide full circle into 4 stages
        const stage = Math.floor((angle / (2 * Math.PI)) * 4) + 1;
      // } else{
      //   const rotation = islandRef.current.rotation.y;
      // }
    //   if (islandRef.current) {
    // const angle = islandRef.current.rotation.y % (2 * Math.PI); // Normalize 0–2π
    // let stage = 1;

    // // Example: Divide full rotation (360°) into 4 sections
    // if (angle >= -Math.PI/4 && angle < Math.PI/4) {
    //   stage = 1;
    // } else if (angle >= Math.PI/4 && angle < (3*Math.PI)/4) {
    //   stage = 2;
    // } else if (angle >= (3*Math.PI)/4 || angle < -(3*Math.PI)/4) {
    //   stage = 3;
    // } else {
    //   stage = 4;
    // }

    setCurrentStage(stage);
  
    });





    useEffect(() => {
      const canvas = gl.domElement;
      canvas.addEventListener('pointerdown', handlePointerDown);
      canvas.addEventListener('pointerup', handlePointerUp);
      canvas.addEventListener('pointermove', handlePointerMove);
      document.addEventListener('keydown', handleKeyDown);
      document.addEventListener('keyup', handleKeyUp);

      return () => {
        canvas.removeEventListener('pointerdown', handlePointerDown);
        canvas.removeEventListener('pointerup', handlePointerUp);
        canvas.removeEventListener('pointermove', handlePointerMove);
        document.removeEventListener('keydown', handleKeyDown);
        document.removeEventListener('keyup', handleKeyUp);
      }
   }, [gl, handlePointerDown, handlePointerUp, handlePointerMove]);




  return (
    <a.group ref={islandRef} {...props} >
      <mesh
        geometry={nodes.polySurface944_tree_body_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        geometry={nodes.polySurface945_tree1_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        geometry={nodes.polySurface946_tree2_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
         geometry={nodes.polySurface947_tree1_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        geometry={nodes.polySurface948_tree_body_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        geometry={nodes.polySurface949_tree_body_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        geometry={nodes.pCube11_rocks1_0.geometry}
        material={materials.PaletteMaterial001}
      />
    </a.group>
  )
}


export default Island;
